#!/usr/bin/env python3
#
# Copyright 2013 Simone Campagna
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

__author__ = "Simone Campagna"

import os
import sys
import glob
import time
import shutil
import logging
import argparse
import calendar
import datetime
import configparser

class Ask(object):
    def __init__(self, answer='x'):
        self._answer = answer

    def ask(self, question):
        answer = self._answer
        while not answer in 'ANyn':
            answer = input(question + "? ([y]es/[n]o/[A]ll/[N]one) ")

        if answer in 'AN':
            self._answer = answer

        if answer in 'Ay':
            return True
        else:
            return False

ASK_CLEAN = Ask()

_NOW = datetime.datetime.now()

class _TDelta(object):
    def __init__(self, year=0, month=0, day=0, hour=0, minute=0, second=0):
        self.year = year
        self.month = month
        self.day = day
        self.hour = hour
        self.minute = minute
        self.second = second

    def __add__(self, dt):
        assert isinstance(dt, datetime.datetime)
        return self._make_datetime(
            year=self.year + dt.year, 
            month=self.month + dt.month, 
            day=self.day + dt.day, 
            hour=self.hour + dt.hour, 
            minute=self.minute + dt.minute, 
            second=self.second + dt.second, 
        )

    def __radd__(self, dt):
        assert isinstance(dt, datetime.datetime)
        return self.__add__(dt)

    def __sub__(self, dt):
        assert isinstance(dt, datetime.datetime)
        return self._make_datetime(
            year=self.year - dt.year, 
            month=self.month - dt.month, 
            day=self.day - dt.day, 
            hour=self.hour - dt.hour, 
            minute=self.minute - dt.minute, 
            second=self.second - dt.second, 
        )

    def __rsub__(self, dt):
        assert isinstance(dt, datetime.datetime)
        return self._make_datetime(
            year=self.year - dt.year, 
            month=self.month - dt.month, 
            day=self.day - dt.day, 
            hour=self.hour - dt.hour, 
            minute=self.minute - dt.minute, 
            second=self.second - dt.second, 
        )

    def _norm_month(self, year, month):
        while month < 1:
            month += 12
            year -= 1
        while month > 12:
            month -= 12
            year += 1
        return year, month

    def _make_datetime(self, year, month, day, hour, minute, second):
        while second < 0:
            minute -= 1
            second += 60
        while second >= 60:
            minute += 1
            second -= 60
        while minute < 0:
            hour -= 1
            minute += 60
        while minute >= 60:
            hour += 1
            minute -= 60
        while hour < 0:
            day -= 1
            hour += 24
        while hour >= 24:
            day += 1
            hour -= 24
        year, month = self._norm_month(year, month)
        while day < 0:
            month -= 1
            year, month = self._norm_month(year, month - 1)
            month_days = calendar.monthrange(year, month)[1]
            day += month_days
        year, month = self._norm_month(year, month)
        while True:
            month_days = calendar.monthrange(year, month)[1]
            if day < month_days:
                break
            year, month = self._norm_month(year, month + 1)
            day -= month_days
        return datetime.datetime(year, month, day, hour, minute, second)
      

def _ago(*, year=0, month=0, day=0, hour=0, minute=0, second=0):
    return datetime.datetime(_NOW.year - year, _NOW.month - month, _NOW.day - day, _NOW.hour - hour, _NOW.minute - minute, _NOW.second - second)

def _years_ago(s):
    return _ago(year=int(s))

def _months_ago(s):
    return _ago(month=int(s))

def _weeks_ago(s):
    return _ago(day=7 * int(s))

def _days_ago(s):
    return _ago(day=int(s))

def _hours_ago(s):
    return _ago(hour=int(s))

def _minutes_ago(s):
    return _ago(minute=int(s))

def _seconds_ago(s):
    return _ago(second=int(s))

def _date(s):
    formats = ("%Y%m%d %H:%M:%S", "%Y%m%d")
    for fmt in formats:
        try:
            return datetime.datetime.strptime(s, fmt)
        except ValueError:
            pass
    raise ValueError("invalid value {}: not a date")

def must_remove(message, mode):
    if mode == MODE_INTERACTIVE:
        return ASK_CLEAN.ask("remove {}".format(message))
    elif mode == MODE_FORCE:
        return True
    else:
        assert False

def remove_dir(entry, logger, dry_run):
    if dry_run:
        logger.warning("DRY-RUN> removing directory {}".format(entry))
    else:
        logger.info("removing directory {}".format(entry))
        shutil.rmtree(entry, ignore_errors=True)

def remove_link(entry, logger, dry_run):
    if dry_run:
        logger.warning("DRY-RUN> removing symbolic link {}".format(entry))
    else:
        logger.info("removing symbolic link {}".format(entry))
        os.remove(entry)

def remove_file(entry, logger, dry_run):
    if dry_run:
        logger.warning("DRY-RUN> removing file {}".format(entry))
    else:
        logger.info("removing file {}".format(entry))
        os.remove(entry)

MODE_INTERACTIVE = 'interactive'
MODE_FORCE = 'force'
MODES = (MODE_FORCE, MODE_INTERACTIVE)

DEFAULT_MODE = MODE_INTERACTIVE

DEFAULT_TIME_ATTRIBUTE = "st_mtime"


TIME_ATTRIBUTE = DEFAULT_TIME_ATTRIBUTE
MODE = DEFAULT_MODE
DRY_RUN = False

def apply_patterns(logger, ref_date, *patterns):
    for pattern in patterns:
        for entry in glob.glob(pattern):
            entry_stat = os.stat(entry)
            entry_seconds = getattr(entry_stat, TIME_ATTRIBUTE)
            entry_date = datetime.datetime(*time.localtime(entry_seconds)[:6])
            entry_type = None
            entry_remover = None
            if os.path.isdir(entry):
                # dir
                entry_type = 'directory'
                entry_remover = remove_dir
            elif os.path.islink(entry):
                # link
                entry_type = 'symbolic link'
                entry_remover = remove_link
            elif os.path.isfile(entry):
                # file
                entry_type = 'file'
                entry_remover = remove_file
            else:
                logger.warning("skipping unmanaged entry {}".format(entry))
                continue
            logger.debug("{} {}, {}={}, ref_time={}".format(entry_type, entry, TIME_ATTRIBUTE, entry_date, ref_date))
            if entry_date < ref_date:
                if must_remove("{} {}".format(entry_type, entry), MODE):
                    entry_remover(entry, logger, DRY_RUN)
            else:
                logger.debug("skipping young {} {}".format(entry_type, entry))

def main():
    common_parser = argparse.ArgumentParser(add_help=False)

    common_parser.add_argument("--verbose", "-v",
        action="store_true",
        default=False,
        help="verbose mode")

    common_parser.add_argument("--debug", "-d",
        action="store_true",
        default=False,
        help="debug mode")

    common_parser.add_argument("--dry-run",
        action="store_true",
        default=False,
        help="dry run (do not delete)")

    time_group = common_parser.add_mutually_exclusive_group(required=False)

    time_group.add_argument("--ctime",
        dest="st_time_attribute",
        action="store_const",
        const="st_ctime",
        default=DEFAULT_TIME_ATTRIBUTE,
        help="use inode change time")
   
    time_group.add_argument("--mtime",
        dest="st_time_attribute",
        action="store_const",
        const="st_mtime",
        default=DEFAULT_TIME_ATTRIBUTE,
        help="use file modification time")
   
    time_group.add_argument("--atime",
        dest="st_time_attribute",
        action="store_const",
        const="st_atime",
        default=DEFAULT_TIME_ATTRIBUTE,
        help="use file access time")
   
    mode_group = common_parser.add_mutually_exclusive_group(required=False)

    mode_group.add_argument("--interactive", "-i",
        dest="mode",
        action="store_const",
        const=MODE_INTERACTIVE,
        default=DEFAULT_MODE,
        help="interactive (ask before deleting)")

    mode_group.add_argument("--force", "-f",
        dest="mode",
        action="store_const",
        const=MODE_FORCE,
        default=DEFAULT_MODE,
        help="force (delete files without asking)")

    parser = argparse.ArgumentParser(parents=[common_parser])

    input_group = parser.add_mutually_exclusive_group()

    input_group.add_argument("--config", "-c", 
        type=str,
        metavar="C",
        default=None,
        help="config filename")

    input_group.add_argument("--pattern", "-p",
        dest="patterns",
        action="append",
        default=[],
        help="add pattern")

    date_group = parser.add_mutually_exclusive_group(required=True)

    date_group.add_argument("--years-ago", "-Y",
        dest="ref_date",
        metavar="Y",
        type=_years_ago,
        help="remove files older than Y years")

    date_group.add_argument("--months-ago", "-M",
        dest="ref_date",
        metavar="M",
        type=_months_ago,
        help="remove files older than M months")

    date_group.add_argument("--weeks-ago", "-W",
        dest="ref_date",
        metavar="W",
        type=_weeks_ago,
        help="remove files older than W weeks")

    date_group.add_argument("--days-ago", "-D",
        dest="ref_date",
        metavar="D",
        type=_days_ago,
        help="remove files older than D days")

    date_group.add_argument("--hours-ago", "-H",
        dest="ref_date",
        metavar="H",
        type=_hours_ago,
        help="remove files older than H hours")

    date_group.add_argument("--minutes-ago", "-m",
        dest="ref_date",
        metavar="M",
        type=_minutes_ago,
        help="remove files older than M minutes")

    date_group.add_argument("--seconds-ago", "-s",
        dest="ref_date",
        metavar="S",
        type=_seconds_ago,
        help="remove files older than S seconds")

    date_group.add_argument("--ref-date", "-R",
        dest="ref_date",
        metavar="RD",
        type=_date,
        help="remove files older than reference date RD")

    args = parser.parse_args()

    logger = logging.getLogger("CLEAN_DIRS")
    handler = logging.StreamHandler()
    log_level = logging.WARNING
    if args.debug:
        log_level = logging.DEBUG
    elif args.verbose:
        log_level = logging.INFO
    else:
        log_level = logging.WARNING
    logger.addHandler(handler)
    logger.setLevel(log_level)
    handler.setLevel(log_level)

    global TIME_ATTRIBUTE
    TIME_ATTRIBUTE = args.st_time_attribute

    global MODE
    MODE = args.mode

    global DRY_RUN
    DRY_RUN = args.dry_run

    if args.config:
        config = configparser.ConfigParser()
        config.read(args.config)
        for key, val in config.items():
            print(key, repr(val), type(val))
        print(config)

    elif args.patterns:
        if args.ref_date is None:
            logger.error("ERR: reference date not specified")
            sys.exit(1)
        apply_patterns(logger, args.ref_date, *args.patterns)


if __name__ == "__main__":
    main()
